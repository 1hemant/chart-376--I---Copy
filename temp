var myDB = "";
var states = {};
var seriesOptions = [];
var serviceurl="http://10.90.21.41:9080/";
//var serviceurl="http://10.90.21.22:8081/";
//var serviceurl="http://10.90.21.43:8081/";
var createrepositorydata = "CREATE TABLE IF NOT EXISTS Repository (jsonformat text)";
var createtablestatement = "CREATE TABLE IF NOT EXISTS Authentication (emailid text, status text, dataid text, dataname text, title text, subtitle text,footer text, clientimage text, companylogo text,background text, backgroundcolor text)";
var createmetadata = "CREATE TABLE IF NOT EXISTS MetaData (visualization text, workboard text)";
var createbusinessdata = "CREATE TABLE IF NOT EXISTS BusinessData (kettle text)";
toastr.options = {
  "closeButton": true,
  "debug": false,
  "newestOnTop": false,
  "progressBar": false,
  "positionClass": "toast-bottom-full-width",
  "preventDuplicates": true,
  "onclick": null,
  "showDuration": "300",
  "hideDuration": "1000",
  "timeOut": "5000",
  "extendedTimeOut": "1000",
  "showEasing": "swing",
  "hideEasing": "linear",
  "showMethod": "fadeIn",
  "hideMethod": "fadeOut"
};


function onOnline() {
    var networkState = navigator.connection.type;
    
    if (networkState !== Connection.NONE) {
        toastr.error('Device is Online');
    }
    display('Connection type: ' + networkState);
}

function onOffline() {
    var networkState = navigator.connection.type;
    if (networkState == Connection.NONE) {
        toastr.error('Device is Offline');
    }
}

function opendb(){
    myDB = window.sqlitePlugin.openDatabase({name: "mySQLite.db", location: 'default'});
}

function createtable(){
    myDB.executeSql("DROP TABLE IF EXISTS Repository");
    myDB.executeSql("DROP TABLE IF EXISTS Authentication");
    myDB.executeSql("DROP TABLE IF EXISTS MetaData");
    myDB.executeSql("DROP TABLE IF EXISTS BusinessData");
    myDB.transaction(function(transaction) {
    transaction.executeSql(createtablestatement, [],
        function(tx, result) {},
        function(error) {});
    });
    myDB.transaction(function(transaction) {
                     transaction.executeSql(createrepositorydata, [],
                                            function(tx, result) {},
                                            function(error) {});
                     });
    myDB.transaction(function(transaction) {
                     transaction.executeSql(createmetadata, [],
                                            function(tx, result) {},
                                            function(error) {});
                     });
    myDB.transaction(function(transaction) {
                     transaction.executeSql(createbusinessdata, [],
                                            function(tx, result) {},
                                            function(error) {});
                     });
}

function selectfirsttimequery(){
    myDB.transaction(function(transaction) {
    transaction.executeSql('SELECT * FROM Authentication', [], function (tx, results) {
                        
        var len = results.rows.length, i;
        if (len >= 1){
            window.location="tour.html"
        }
        else{
            window.location="tour.html"
        }
     }, null);
   });
}

function checkConnection()
{
    var networkState = navigator.connection.type;

    states[Connection.UNKNOWN]  = 'Unknown connection';
    states[Connection.ETHERNET] = 'Ethernet connection';
    states[Connection.WIFI]     = 'WiFi connection';
    states[Connection.CELL_2G]  = 'Cell 2G connection';
    states[Connection.CELL_3G]  = 'Cell 3G connection';
    states[Connection.CELL_4G]  = 'Cell 4G connection';
    states[Connection.NONE]     = 'No network connection';

    if (states[networkState] == "No network connection"){
        toastr.error('Device is Offline');
        return false;
    }
}
function showModal(msgText){
    $("body").append('<div class="modalWindow"/>');
    $.mobile.loading( 'show', {
                     text: msgText,
                     textVisible: msgText,
                     theme: "A",
                     textonly: msgText,
                     //html: html
                     });
}

function hideModal(){
    $(".modalWindow").remove();
    $.mobile.loading( 'hide' );
    
}
function emailidverification(){
    var emailText = $.trim($("#txt-email").val());
    var requestData = {"data":{"email":emailText}};
    var configurationvalue="";
    $.ajax({
           url:  "http://10.90.21.43:8081/organization-service/get-organizationdetails",
           type: "POST",
           data: JSON.stringify(requestData),
           contentType: 'application/json; charset=UTF-8',
           dataType: 'json',
           success: function(object){
           if (object.status.value == "success"){

           configurationvalue = JSON.parse(object.data[0].Configuration);

                myDB.transaction(function(transaction) {
                            var executeQuery = "INSERT INTO Authentication (emailid, status, dataid, dataname, title, subtitle,footer, clientimage, companylogo, background, backgroundcolor) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
                            
                             transaction.executeSql(executeQuery, [emailText, object.status.value, object.data[0].Id, object.data[0].Name, configurationvalue.heading.title, configurationvalue.heading.subtitle, configurationvalue.footer, object.data[0].ClientLogo, object.data[0].CompanyLogo, object.data[0].Background, object.data[0].BackgroundColor]
                                                   , function(tx, result) {
                                                   window.location="password.html";
                                                   },
                                                   function(error){
                                                   toastr.error('Problem occur while inserting data.');
                                                   });
                            });
           }
           else{
                toastr.error('Please enter correct email id');
                return false;
           }
           
           },
           error: function(error){
                toastr.error('Error in email service ' + eval(error));
           }
           });
}
function fillDetails(){
    myDB.transaction(function(transaction) {
    transaction.executeSql('SELECT * FROM Authentication', [], function (tx, results) {
    var len = results.rows.length, i;
    for (i = 0; i < 1; i++){
         $('#title').html(results.rows.item(i).title);
         $('#userimage').attr("src", results.rows.item(i).clientimage);
         $('#clientlogo').attr("src", results.rows.item(i).companylogo);
}
     });
     });
}
function passwordverification(){
    var passwordText = $.trim($("#pwd_password").val());
    myDB.transaction(function(transaction) {
                     transaction.executeSql(createrepositorydata, [],
                                            function(tx, result) {},
                                            function(error) {});
                     });

    FetchRepositoryData();
}
function FetchRepositoryData(){
    var requestData = {"data":{"userId":"2"}};
    $.ajax({
    url:  serviceurl + "repository-service/getRepository",
    type: "POST",
    data: JSON.stringify(requestData),
    contentType: 'application/json; charset=UTF-8',
    dataType: 'json',
    success: function(object){

    if (object.status.value == "sucess"){
           
           myDB.transaction(function(transaction) {
                     var executeQuery = "INSERT INTO Repository (jsonformat) VALUES (?)";
    
                     transaction.executeSql(executeQuery, [JSON.stringify(object)]
                                           , function(tx, result) {
                                           window.location="repository.html";
                                           },
                                           function(error){
                                           toastr.error('Problem occur while inserting data.');
                                           });
                   });
    }
    else{
    toastr.error('Please enter correct password');
    return false;
    }
    
    },
    error: function(error){
    toastr.error('Error in password service ' + eval(error));
    }
    });
    
}
function paintlist(){

    var appenddata="";
    var appenddata1="";
    var paintdata = {};
    var status = "";
    var version = "";
    myDB.transaction(function(transaction) {
        
             transaction.executeSql('SELECT * FROM Repository', [], function (tx, results) {
                var len = results.rows.length, i;
                for (i = 0; i < 1; i++){
                    paintdata = results.rows.item(i).jsonformat;
                    paintdata = JSON.parse(paintdata);
                    status = paintdata.status.value;
                    version = paintdata.version.pointer;
                    $.each(paintdata.data,function(i1,v1)
                           
                           {
                               appenddata += "<div data-role='collapsible' ><h2 style='text-transform:capitalize'>" + i1 + "</h2><div id="+ i1 +"></div></div>";
                               if (i1 == "dashboards"){
                                   $.each(paintdata.data.dashboards,function(i2,v2)
                                         {
                                          
                                              $.each(paintdata.data.dashboards[i2].value,function(i3,v3){
                                                     //alert(v3.name);
                                                     appenddata1 += "<div data-role='collapsible'><h2 >" + v3.name + "</h2><p><h5>Dashboard Description: Dashboard with Highcharts</h5></p><p><h5>Dashboard Created on: 10/05/2016</h5></p><p><h5>Dashboard Owner: Tarun Kumar</h5></p><p><h5>Owner Email ID: tarunk@netlink.com</h5></p><p><h5>Last Updated On: 30/05/2016</h5></p><div style='margin-left:5px'><a href='#downloadDialog' data-rel='popup' data-position-to='window' data-transition='pop' class='ui-corner-all ui-btn ui-btn-inline' onclick= loadDashboard(" + v3.owner + "," + v3.dashboardId + ")>Download</a><a href='#deleteDialog' data-rel='popup' data-position-to='window' data-transition='pop' class='ui-btn ui-corner-all ui-btn-inline ' >Delete Dashboard</a></div></div>";
                                                    });
                                      /*    <ul data-role="listview" data-theme="a" data-divider-theme="b">
                                          <li data-role="list-divider">Friday, October 8, 2010 <span class="ui-li-count">2</span></li>
                                          <li><a href="index.html">
                                          <h3>Stephen Weber</h3>
                                          <p><strong>You've been invited to a meeting at Filament Group in Boston, MA</strong></p>
                                          <p>Hey Stephen, if you're available at 10am tomorrow, we've got a meeting with the jQuery team.</p>
                                          <p class="ui-li-aside"><strong>6:24</strong>PM</p>
                                          </a></li>
                                          <li><a href="index.html">
                                          <h3>jQuery Team</h3>
                                          <p><strong>Boston Conference Planning</strong></p>
                                          <p>In preparation for the upcoming conference in Boston, we need to start gathering a list of sponsors and speakers.</p>
                                          <p class="ui-li-aside"><strong>9:18</strong>AM</p>
                                          </a></li>
                                          </ul>
                                       
                                       <a href="#popupDialog" data-rel="popup" data-position-to="window" data-transition="pop" class="ui-btn ui-corner-all ui-shadow ui-btn-inline ui-icon-delete ui-btn-icon-left ui-btn-b">Delete Dashboard?</a>
                                       
                                          */
                                          });
                               }
                        });
                    jQuery('#level1').html(appenddata);
                    jQuery('#dashboards').html(appenddata1);
                    $('#level1').collapsibleset('refresh');
                                    $('#dashboards').listview('refresh');
                }
            });
        });
    
    
}


function paintMenu(){
    
    var appenddata="";
    var appenddata1="";
    var paintdata = {};
    var status = "";
    var version = "";
    myDB.transaction(function(transaction) {
                     
                     transaction.executeSql('SELECT * FROM Repository', [], function (tx, results) {
                                            var len = results.rows.length, i;
                                            for (i = 0; i < 1; i++){
                                            paintdata = results.rows.item(i).jsonformat;
                                            paintdata = JSON.parse(paintdata);
                                            status = paintdata.status.value;
                                            version = paintdata.version.pointer;
                                            $.each(paintdata.data,function(i1,v1)
                                                   
                                                   {
                                                   appenddata += "<div data-role='collapsible' ><h2>" + i1 + "</h2><div id="+ i1 +"></div></div>";
                                                   if (i1 == "dashboards"){
                                                   $.each(paintdata.data.dashboards,function(i2,v2)
                                                          {
                                                          $.each(paintdata.data.dashboards[i2].value,function(i3,v3){
                                                                 appenddata1 += "<li ><a href=#  onclick= paintGraphs(" + v3.dashboardId + "," + v3.owner + ")>" + v3.name + "</a></li>";
                                                                 });
                                                          });
                                                   }
                                                   });
                                            jQuery('#level2').html(appenddata1);
                                            $('#level2').listview('refresh');
                                            }
                                            });
                     });
}
function loadDashboard(owner,dashboardId){
    //getWorkboardData(owner,dashboardId);
    getKettleData(2,25);
    //getWorkboardData(2,7);
    //window.location = "bsnlcharts.html";
}

function paintGraphs(dashboardId,owner){
    /*var workboard = {};
    var visualisation = {};
    var kettle = {};
    showModal("Please Wait !!!!!!");
    myDB.transaction(function(transaction) {
              transaction.executeSql('SELECT * FROM MetaData', [], function (tx, results) {
                        visualization = results.rows.item(i).visualization;
                        workboard = results.rows.item(i).workboard;
                                     workboard = JSON.parse(workboard);
                                     visualization = JSON.parse(visualization);
                                     });
                     });
    myDB.transaction(function(transaction) {
                     transaction.executeSql('SELECT * FROM BusinessData', [], function (tx, results) {
                                            kettle = results.rows.item(i).kettle;
                                            kettle = JSON.parse(kettle);
                                            });
                     });
    
    
    $.each(workboard.data,function(windex1,wvalue1){
           alert(windex1);
           alert(wvalue1);
           });
    hideModal();*/
    columnchart(1,1,1,1,1,1);
    piechart();
    hightable();
};
function columnchart(type,title,xcategories,ytitle,tooltipbgcolor,series){
    $('#container').highcharts({
                               chart: {
                               type:  'column' //type
                               },
                               title: {
                               text:  'USAGE BY CATEGORY' // title
                               },
                               xAxis: {
                               categories:  ['Very High', 'High', 'Medium', 'Low', 'Very Low'] //xcategories
                               },
                               yAxis: {
                               title: {
                               text:  'No of Customer' //ytitle
                               }
                               },
                               legend: {
                               align: 'center',
                               verticalAlign: 'bottom',
                               floating: false,
                               borderColor: '#CCC',
                               borderWidth: 1,
                               shadow: false
                               },
                               tooltip: {
                               headerFormat: '<b>{point.x}</b><br/>',
                               backgroundColor: 'rgba(255, 255, 255, .4)' //tooltipbgcolor
                               },
                               plotOptions: {
                               column: {
                               stacking: 'normal',
                               cursor: 'pointer',
                               dataLabels: {
                               enabled: false,
                               color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                               style: {
                               textShadow: '0 0 3px black'
                               }
                               },
                               showInLegend: true
                               }
                               },
                               series:   [{
                                          name: 'Local',
                                          data: [87, 73, 131, 996, 197432],
                                          color: 'rgb(0, 188, 212)'
                                          }, {
                                          name: 'STD',
                                          data: [34, 6, 15, 21, 47],
                                          color: 'rgb(255, 152, 0)'
                                          }, {
                                          name: 'ISD',
                                          data: [7, 2, 5, 40, 68],
                                          color: 'rgb(139, 195, 74)'
                                          }] //series
                               
                               });

}
function piechart(){
    $('#container1').highcharts({
                               chart: {
                               plotBackgroundColor: null,
                               plotBorderWidth: null,
                               plotShadow: false,
                               type: 'pie'
                               },
                               title: {
                               text: 'Usage Breakup'
                               },
                               tooltip: {
                            //headerFormat: '<b>{point.key}</b><br/>',
                            pointFormat: '<b>Usage : </b>{point.percentage:.1f}<br/><b>percentage :</b> {point.tooltip-1} %'
                               },
                               plotOptions: {
                               pie: {
                               allowPointSelect: true,
                               cursor: 'pointer',
                               dataLabels: {
                               enabled: false
                               },
                               showInLegend: true
                               }
                               },
                               series: [{
                                        //name: 'Usage',
                                        colorByPoint: true,
                                        data: [{
                                               name: 'Slice',
                                               y: 6634.235847778,
                                               color:'#00BCD4'
                                               }, {
                                               name: 'Slice',
                                               y: 868.428831111,
                                               sliced: true,
                                               selected: true,
                                               color:'orange'
                                               }, {
                                               name: 'Slice',
                                               y: 6.013775,
                                               color:'rgb(139, 195, 74)'
                                               }]
                                        }]
                               });
}
function hightable(){
    
}
function getWorkboardData(userId,workboard_id) {
    //showModal("Data Downloading...");
    $("#downloadheader").text("Processing...");
    $("#onfinish").attr("style", "display:none");
    $("#onrunning").attr("style", "display:block");
    //var requestData = {"data":{"userId":userId,"workboard_id":workboard_id,"businessobject_id":[19,27,29],"params":{}}};
    var requestData = {"data":{"userId":userId,"workboard_id":workboard_id,"params":{}}};
    return $.ajax({
                  url: serviceurl + "workboard-service/get-workboard",
                  type: "POST",
                  data: JSON.stringify(requestData),
                  contentType: 'application/json; charset=utf-8',
                  dataType: 'json',
                  success: function(object)
                  {
                  if (object.status.value == "successfull"){
                  
                  myDB.transaction(function(transaction) {
                                   var executeQuery = "INSERT INTO MetaData (workboard) VALUES (?)";
                                   
                                   transaction.executeSql(executeQuery, [JSON.stringify(object)]
                                                          , function(tx, result) {
                                                          getVisualizationData(userId,workboard_id);
                                                          },
                                                          function(error){
                                                          toastr.error('Problem occur while inserting data.');
                                                          });
                                   });
                  }
                  else{
                  toastr.error('Error in fetching service data !!!');
                  return false;
                  }
                  },
                  error: function(error)
                  {
                  alert('Error in getWorkboardData;' + eval(error));
                  }
                  });
    
}

function getKettleData(userId,workboard_id) {
    $("#downloadheader").text("Processing...");
    $("#onfinish").attr("style", "display:none");
    $("#onrunning").attr("style", "display:block");
    var requestData = {"data":{"userId":userId,"workboard_id":workboard_id,"params":{}}};
    //var requestData = {"data":{"userId":userId,"workboard_id":workboard_id,"businessobject_id":[19,27,29],"params":{}}};
    return $.ajax({
                  url: serviceurl + "kettle-service/kettle",
                  type: "POST",
                  data: JSON.stringify(requestData),
                  contentType: 'application/json; charset=utf-8',
                  dataType: 'json',
                  success: function(object)
                  {
                  if (object.status.value == "success"){
                  
                  myDB.transaction(function(transaction) {
                                   var executeQuery = "INSERT INTO BusinessData (kettle) VALUES (?)";
                                   
                                   transaction.executeSql(executeQuery, [JSON.stringify(object)]
                                                          , function(tx, result) {
                                                          $("#downloadheader").text("Success...");
                                                          $("#onrunning").attr("style", "display:none");
                                                          $("#onfinish").attr("style", "display:block");
                                                          },
                                                          function(error){
                                                          toastr.error('Problem occur while inserting data.');
                                                          });
                                   });
                  }
                  else{
                  toastr.error('Error in fetching service data !!!');
                  return false;
                  }
                  },
                  error: function(error)
                  {
                  alert('Error in getkettleData;' + eval(error));
                  }
                  });
    
}

function getVisualizationData(userId,workboard_id) {
    var requestData = {"data":{"userId":userId,"workboard_id":workboard_id,"params":{}}};
    //var requestData = {"data":{"userId":userId,"workboard_id":workboard_id,"businessobject_id":[19,27,29],"params":{}}};
    return $.ajax({
                  url: serviceurl + "visualization-service/getVisualizationData",
                  type: "POST",
                  data: JSON.stringify(requestData),
                  contentType: 'application/json; charset=utf-8',
                  dataType: 'json',
                  success: function(object)
                  {
                  if (object.status.value == "success"){
                  
                  myDB.transaction(function(transaction) {
                                   var executeQuery = "INSERT INTO MetaData (visualization) VALUES (?)";
                                   
                                   transaction.executeSql(executeQuery, [JSON.stringify(object)]
                                                          , function(tx, result) {
                                                          getKettleData(userId,workboard_id);
                                                          },
                                                          function(error){
                                                          toastr.error('Problem occur while inserting data.');
                                                          });
                                   });
                  }
                  else{
                  toastr.error('Error in fetching service data !!!');
                  return false;
                  }

                  },
                  error: function(error)
                  {
                  alert('Error in getVisualizationData;' + eval(error));
                  }
                  });
    
}
function paintbsnl(){
    
     var kettle = {};
     var resultData  = {};
     var metaData  = {};
        seriesCounter = 0,
    cDate = [],
    vLow = [],
    low = [],
    medium = [],
    high = [],
    vHigh = [],
    data = [],
    serieseData = [],
    serieseName = [],
    //names = ['MSFT', 'AAPL', 'GOOG'];
    names = [];
     myDB.transaction(function(transaction) {
     transaction.executeSql('SELECT * FROM BusinessData', [], function (tx, results) {

     kettle = results.rows.item(0).kettle;
     kettle = JSON.parse(kettle);
                            $.each(kettle.data,function(windex1,wvalue1){
                                   var appenddata="";
                                   var appenddata1="";
                                   resultData = wvalue1.resultSet;
                                   metaData = wvalue1.metaData;
                                   appenddata = "<div id='"+windex1+"' style='height: 400px; min-width: 310px' ></div>";
                                   appenddata1 = "<div id='"+windex1+"' style='height: 400px; width: 550px' ></div>";
                                   if (windex1 == "378"){
                                   
                                   $.each(metaData, function(index,value){
                                          if (value.colName != "Calling_Date"){
                                          names.push(value.colName);
                                          }
                                          })
                                   $.each(resultData, function(index,value){
                                          var datetime = Date.parse(value[0]);
                                          var date = new Date(datetime);
                                          //alert((date.getMonth() + 1) + '/' + date.getDate() + '/' +  date.getFullYear());
                                          datetime = Date.UTC(date.getFullYear(), date.getMonth() + 1, date.getDate())
                                          vLow.push([datetime,Number(value[1])]),
                                          low.push([datetime,Number(value[2])]),
                                          medium.push([datetime,Number(value[3])]),
                                          high.push([datetime,Number(value[4])]),
                                          vHigh.push([datetime,Number(value[5])]);
                                          })
                                   data[0]=vLow;
                                   data[1]=low;
                                   data[2]=medium
                                   data[3]=high;
                                   data[4]=vHigh;
                                   $.each(names, function (i, name) {
                                          
                                          seriesOptions[i] = {
                                          name: name,
                                          data: data[i],
                                          marker : {
                                          enabled : true,
                                          radius : 3
                                          },
                                          shadow : true,
                                          threshold: null
                                          };
                                          
                                          // As we're loading the data asynchronously, we don't know what order it will arrive. So
                                          // we keep a counter and create the chart when all the data is loaded.
                                          seriesCounter += 1;
                                          
                                          if (seriesCounter === 5) {
                                          jQuery('#main').append(appenddata);
                                          createTimeseries(windex1);
                                          }
                                          //});
                                    });
                                   }
                                   if (windex1 == "377"){
                                   $.each(resultData, function(index,value){
                                          var len=value.length;
                                          serieseName.push(value[0]);
                                          serieseData.push(parseInt(value[1]));
                                          //console.log(value[0]);
                                          });
                                   jQuery('#main').append(appenddata);
                                   createArea(windex1,serieseName,serieseData);
                                   }
                            });
                            function createTimeseries(name) {
                            
                            $('#'+name).highcharts('StockChart', {
                                                       
                                                       rangeSelector: {
                                                       selected: 4
                                                       },
                                                       
                                                       yAxis: {
                                                       labels: {
                                                       formatter: function () {
                                                       return (this.value > 0 ? ' + ' : '') + this.value + '%';
                                                       }
                                                       },
                                                       plotLines: [{
                                                                   value: 0,
                                                                   width: 2,
                                                                   color: 'silver'
                                                                   }]
                                                       },
                                                       
                                                       plotOptions: {
                                                       series: {
                                                       compare: 'percent'
                                                       }
                                                       },
                                                       
                                                       tooltip: {
                                                       pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',
                                                       valueDecimals: 2
                                                       },
                                                       
                                                       series: seriesOptions
                                                       });
                            }

     });
     });
}

function createArea(name,seriesName,seriesData) {
    
    var chart1 = new Highcharts.Chart({
                                      
                                      chart: {
                                      type: 'area',
                                      renderTo: name
                                      },
                                      title: {
                                      text: 'US and USSR nuclear stockpiles'
                                      },
                                      
                                      xAxis: {
                                      categories: seriesName,
                                      title: {
                                      enabled: true
                                      }
                                      },
                                      yAxis: {
                                      title: {
                                      text: 'Nuclear weapon states'
                                      },
                                      labels: {
                                      formatter: function () {
                                      return this.value / 1000 + 'k';
                                      }
                                      }
                                      },
                                      tooltip: {
                                      pointFormat: '{series.name} produced <b>{point.y:,.0f}</b><br/>warheads in {point.x}'
                                      },
                                      plotOptions: {
                                      area: {
                                      dataLabels: {
                                      enabled: true
                                      
                                      }
                                      }
                                      },
                                      
                                      series: [{
                                               name: 'USA',
                                               data: seriesData
                                               }]
                                      });
    
    
    
}
    /*
    myDB.transaction(function (tx) {
                   
                   var query = "SELECT * FROM BusinessData";
                   
                   tx.executeSql(query, function (tx, resultSet) {
                                 
                                 for(var x = 0; x < resultSet.rows.length; x++) {
                                 kettle = resultSet.rows.item(x).kettle;
                                 kettle = JSON.parse(kettle);
                                 
                                 }
                                 },
                                 function (tx, error) {
                                 toastr.error('SELECT error: ' + error.message);
                                 });
                   }, function (error) {
                   toastr.error('transaction error: ' + error.message);
                   }, function () {
                     $.each(kettle.data,function(windex1,wvalue1){
                            alert(windex1);
                            alert(wvalue1);
                      });
                   });
    
    */

